// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderManagementSystem.DAL.EntityFrameworkCore.Context;

#nullable disable

namespace OrderManagementSystem.DAL.Migrations
{
    [DbContext(typeof(OrderManagementSystemContext))]
    partial class OrderManagementSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Food"
                        });
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdressId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdressId = 3,
                            CreatedAt = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 5,
                            ShippingDate = new DateTime(2025, 8, 8, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            CurrentStockQuantity = 199,
                            IsDeleted = false,
                            Name = "X-Biscuit"
                        });
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            EmailAdress = "byrm.telli.contact@gmail.com",
                            Firstname = "Bayram",
                            IsDeleted = false,
                            Lastname = "Telli",
                            PhoneNumber = "0 555 444 33 22",
                            UserName = "btelli123"
                        });
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.UserAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Ankara",
                            Country = "Türkiye",
                            CreatedAt = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            District = "Yeni Mahalle",
                            IsDeleted = false,
                            PostalCode = "06500",
                            Street = "X Street",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Istanbul",
                            Country = "Türkiye",
                            CreatedAt = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            District = "Şişli",
                            IsDeleted = false,
                            PostalCode = "34500",
                            Street = "X Street",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Tekirdağ",
                            Country = "Türkiye",
                            CreatedAt = new DateTime(2025, 8, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            District = "Çerkezköy",
                            IsDeleted = false,
                            PostalCode = "59500",
                            Street = "X Street",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Order", b =>
                {
                    b.HasOne("OrderManagementSystem.CORE.Models.Entities.UserAdress", "Adress")
                        .WithMany("Orders")
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.CORE.Models.Entities.User", "Owner")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("OrderManagementSystem.CORE.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.CORE.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Product", b =>
                {
                    b.HasOne("OrderManagementSystem.CORE.Models.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.UserAdress", b =>
                {
                    b.HasOne("OrderManagementSystem.CORE.Models.Entities.User", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OrderManagementSystem.CORE.Models.Entities.UserAdress", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
